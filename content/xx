from django.shortcuts import render
from django.views.generic import ListView, DetailView
from .models import Entry, EntryCategory, EntryTag
from django.utils.safestring import mark_safe
from bs4 import BeautifulSoup
from django.db.models import Prefetch
from django.core.paginator import Paginator
from django.shortcuts import render, get_object_or_404

class PostListView(ListView):
    model = Entry
    template_name = "entries/post_list.html"
    context_object_name = "posts"
    paginate_by = 10
    
    def get_queryset(self):
        return Entry.objects.filter(type='post', status='published').order_by('-created_at')
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["featured_posts"] = Entry.objects.filter(type="post", status="published").order_by("-created_at")[:5]
        return context


# class PostDetailView(DetailView):
#     model = Entry
#     template_name = "entries/post_detail.html"
#     context_object_name = "post"
    
#     def get_queryset(self):
#         return Entry.objects.filter(type='post', status='published')

class PostDetailView(DetailView):
    model = Entry
    template_name = "entries/post_detail.html"
    context_object_name = "post"
    
    def get_queryset(self):
        return Entry.objects.filter(type='post', status='published')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        post = context["post"]

        # --- TOC generation ---
        soup = BeautifulSoup(post.body, "lxml")
        toc_headings = []

        for index, tag in enumerate(soup.find_all(["h2", "h3"])):
            tag_id = tag.get("id") or f"section-{index}"
            tag["id"] = tag_id
            toc_headings.append({
                "text": tag.get_text(),
                "id": tag_id,
                "level": tag.name
            })

        # Replace body with safe HTML (including added ids)
        post.body = mark_safe(str(soup))

        context["toc_headings"] = toc_headings
        return context


class ProjectListView(ListView):
    model = Entry
    template_name = "projects/index.html"
    context_object_name = "projects"
    paginate_by = 10

    def get_queryset(self):
        return Entry.objects.filter(type='project', status='published').order_by('-created_at')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # Featured projects
        context["featured_projects"] = Entry.objects.filter(
            type="project",
            status="published",
            is_featured=True
        ).order_by("-created_at")[:3]

        # Only categories and tags used by published projects
        project_qs = Entry.objects.filter(type='project', status='published')

        # Categories used by projects
        context["all_categories"] = EntryCategory.objects.filter(
            entry_categories__in=project_qs
        ).distinct().order_by('name')

        # Tags used by projects
        context["all_tags"] = EntryTag.objects.filter(
            entry_tags__in=project_qs
        ).distinct().order_by('name')

        return context


class ProjectDetailView(DetailView):
    model = Entry
    template_name = "projects/project_detail.html"
    context_object_name = "project"
    
    def get_queryset(self):
        return Entry.objects.filter(type='project', status='published')
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        project = context["project"]

        # --- TOC generation ---
        soup = BeautifulSoup(project.body, "lxml")
        toc_headings = []

        for index, tag in enumerate(soup.find_all(["h2", "h3"])):
            tag_id = tag.get("id") or f"section-{index}"
            tag["id"] = tag_id
            toc_headings.append({
                "text": tag.get_text(),
                "id": tag_id,
                "level": tag.name
            })

        # Replace body with safe HTML (including added ids)
        project.body = mark_safe(str(soup))

        context["toc_headings"] = toc_headings
        return context


class TutorialListView(ListView):
    model = Entry
    template_name = "entries/tutorial_list.html"
    context_object_name = "tutorials"
    paginate_by = 10
    
    def get_queryset(self):
        return Entry.objects.filter(type='tutorial', status='published').order_by('-created_at')



class TutorialDetailView(DetailView):
    model = Entry
    template_name = "entries/tutorial_detail.html"
    context_object_name = "tutorial"
    
    def get_queryset(self):
        return Entry.objects.filter(type='tutorial', status='published')
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        tutorial = context["tutorial"]

        # --- TOC generation ---
        soup = BeautifulSoup(tutorial.body, "lxml")
        toc_headings = []

        for index, tag in enumerate(soup.find_all(["h2", "h3"])):
            tag_id = tag.get("id") or f"section-{index}"
            tag["id"] = tag_id
            toc_headings.append({
                "text": tag.get_text(),
                "id": tag_id,
                "level": tag.name
            })

        # Replace body with safe HTML (including added ids)
        tutorial.body = mark_safe(str(soup))

        context["toc_headings"] = toc_headings
        return context



PROJECTS_PER_PAGE = 10  # adjust if needed

def project_search(request):
    query = request.GET.get('q', '').strip()
    project_list = Entry.objects.filter(
        type='project',
        status__in=['in_progress', 'published'],
        title__icontains=query
    ).select_related('author').prefetch_related('categories', 'tags', 'links').order_by('-created_at')

    paginator = Paginator(project_list, PROJECTS_PER_PAGE)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # Filter categories and tags for projects only
    projects_qs = Entry.objects.filter(type='project', status__in=['in_progress', 'published'])
    all_categories = EntryCategory.objects.filter(entry_categories__in=projects_qs).distinct().order_by('name')
    all_tags = EntryTag.objects.filter(entry_tags__in=projects_qs).distinct().order_by('name')

    context = {
        'query': query,
        'page_obj': page_obj,
        'all_categories': all_categories,
        'all_tags': all_tags,
    }
    return render(request, 'projects/search_results.html', context)


def project_category(request, slug):
    current_category = get_object_or_404(EntryCategory, slug=slug)

    project_list = (
        Entry.objects.filter(
            type='project',
            status__in=['in_progress', 'published'],
            categories=current_category,
        )
        .select_related('author')
        .prefetch_related('categories', 'tags', 'links')
        .order_by('-created_at')
    )

    paginator = Paginator(project_list, PROJECTS_PER_PAGE)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # Restrict categories/tags to projects only
    projects_qs = Entry.objects.filter(
        type='project',
        status__in=['in_progress', 'published'],
    )

    all_categories = (
        EntryCategory.objects.filter(entry_categories__in=projects_qs)
        .distinct()
        .order_by('name')
    )
    all_tags = (
        EntryTag.objects.filter(entry_tags__in=projects_qs)
        .distinct()
        .order_by('name')
    )

    return render(
        request,
        'projects/category.html',
        {
            'page_obj': page_obj,
            'current_category': current_category,
            'all_categories': all_categories,
            'all_tags': all_tags,
        },
    )


def project_tag(request, slug):
    current_tag = get_object_or_404(EntryTag, slug=slug)

    project_list = (
        Entry.objects.filter(
            type='project',
            status__in=['in_progress', 'published'],
            tags=current_tag,
        )
        .select_related('author')
        .prefetch_related('categories', 'tags', 'links')
        .order_by('-created_at')
    )

    paginator = Paginator(project_list, PROJECTS_PER_PAGE)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # Restrict categories/tags to projects only
    projects_qs = Entry.objects.filter(
        type='project',
        status__in=['in_progress', 'published'],
    )

    all_categories = (
        EntryCategory.objects.filter(entry__in=projects_qs)
        .distinct()
        .order_by('name')
    )
    all_tags = (
        EntryTag.objects.filter(entry__in=projects_qs)
        .distinct()
        .order_by('name')
    )

    return render(
        request,
        'projects/tag.html',
        {
            'page_obj': page_obj,
            'current_tag': current_tag,
            'all_categories': all_categories,
            'all_tags': all_tags,
        },
    )

